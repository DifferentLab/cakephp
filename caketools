#!/usr/bin/env bash

#set the base dir for references throughout
export PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

#define the project name so we know the network names
export COMPOSE_PROJECT_NAME=cakephp

TTY=""

# Determine the OS we're running on
UNAMEOUT="$(uname -s)"
case "${UNAMEOUT}" in
Linux*) MACHINE=linux ;;
Darwin*) MACHINE=mac ;;
*) MACHINE="UNKNOWN" ;;
esac

# Create a full compose base command to be used later on
COMPOSE="docker compose"

#no arguments passed to script, run docker-compose ps as default
if [ $# -eq 0 ]; then
	$COMPOSE ps
else
	COMMAND="$1"
	shift

	case "${COMMAND}" in
	"composer")
		$COMPOSE run cake composer "$@"
		;;
	"phinx")
		$COMPOSE run --rm cake-migrations vendors/bin/phinx "$@"
		;;
	"phpcs")
		# Code style checker (using .phpcs.xml.dist config)
		$COMPOSE run --rm cake vendors/bin/phpcs -p --runtime-set ignore_warnings_on_exit 1 --basepath=/code "$@"
		;;
	"phpcsfixer")
		# Code fixer (using .php_cs.dist config)
		$COMPOSE run --rm cake vendors/bin/php-cs-fixer fix --verbose --show-progress=estimating "$@"
		;;
	"phpcbf")
		# Code beautifier & fixer (using .phpcs.xml.dist config)
		$COMPOSE run --rm cake vendors/bin/phpcbf -v --extensions=php --basepath=/code "$@"
		;;
	"phplint")
		# PHP linter (using .phplint.yml)
		$COMPOSE run --rm cake vendors/bin/phplint "$@"
		;;
	"phpstan")
		# PHP Static analysis (using phpstan.neon.dist config)
		$COMPOSE run --rm -e PHP_MEMORY_LIMIT=2G -e PHP_OPCACHE_ENABLED=1 --entrypoint='' cake vendors/bin/phpstan --memory-limit=2G "$@"
		;;
	"test")
		$COMPOSE run --rm ckae vendors/bin/phpunit "$@"
		;;
	*)
		$COMPOSE ${COMMAND} $@
		;;
	esac
fi
